// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Basket {
  id          String       @id
  name        String
  description String
  kg          Int
  price       Float
  available   Boolean      @default(true)
  UserBasket  UserBasket[]
}

model Extra {
  id           String      @id
  name         String
  description  String
  price        Float
  available    Boolean     @default(true)
  UserBasket   UserBasket? @relation(fields: [userBasketId], references: [id])
  userBasketId Int?
}

model TimeException {
  id           Int         @id @default(autoincrement())
  start        DateTime
  end          DateTime
  UserBasket   UserBasket? @relation(fields: [userBasketId], references: [id])
  userBasketId Int?
}

model UserBasket {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now()) @map(name: "created_at")
  updatedAt        DateTime        @updatedAt @map(name: "updated_at")
  basket           Basket          @relation(fields: [basketId], references: [id])
  extras           Extra[]
  frequencyInWeeks Int             @default(1)
  timeException    TimeException[]
  author           User?           @relation(fields: [authorId], references: [id])
  authorId         Int?
  basketId         String
}

model ProductException {
  id          Int    @id @default(autoincrement())
  author      User?  @relation(fields: [authorId], references: [id])
  authorId    Int?
  description String
}

model User {
  id                Int                @id @default(autoincrement())
  name              String?
  email             String?            @unique
  createdAt         DateTime           @default(now()) @map(name: "created_at")
  updatedAt         DateTime           @updatedAt @map(name: "updated_at")
  isAdmin           Boolean            @default(false)
  userBaskets       UserBasket[]
  productsException ProductException[]
  collectionPoint   CollectionPoint?   @relation(fields: [collectionPointId], references: [id])

  collectionPointId Int?
  @@map(name: "users")
}

model CollectionPoint {
  id   Int    @id @default(autoincrement())
  name String
  lat  Float
  lng  Float
  User User[]
}
