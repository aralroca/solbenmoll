// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByRelation"]
}

model Product {
  name   String   @id
  nameEs String
  basket Basket[]
}

model Basket {
  id         String       @id
  kg         Int
  price      Float
  available  Boolean      @default(true)
  products   Product[]
  UserBasket UserBasket[]
}

model Extra {
  id           String      @id
  kg           Int
  price        Float
  available    Boolean     @default(true)
  UserBasket   UserBasket? @relation(fields: [userBasketId], references: [id])
  userBasketId Int?
}

model TimeException {
  id           Int         @id @default(autoincrement())
  start        DateTime
  end          DateTime
  UserBasket   UserBasket? @relation(fields: [userBasketId], references: [id])
  userBasketId Int?
}

model UserBasket {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now()) @map(name: "created_at")
  updatedAt        DateTime        @updatedAt @map(name: "updated_at")
  basket           Basket          @relation(fields: [basketId], references: [id])
  extras           Extra[]
  frequencyInWeeks Int             @default(1)
  timeException    TimeException[]
  author           User?           @relation(fields: [authorId], references: [id])
  authorId         Int?
  basketId         String
}

model ProductException {
  id          Int    @id @default(autoincrement())
  author      User?  @relation(fields: [authorId], references: [id])
  authorId    Int?
  description String
}

model User {
  id                Int                @id @default(autoincrement())
  name              String?
  email             String?            @unique
  createdAt         DateTime           @default(now()) @map(name: "created_at")
  updatedAt         DateTime           @updatedAt @map(name: "updated_at")
  isAdmin           Boolean            @default(false)
  userBaskets       UserBasket[]
  productsException ProductException[]
  collectionPoint   CollectionPoint?   @relation(fields: [collectionPointId], references: [id])
  collectionPointId Int?
  emailVerified     DateTime?          @map(name: "email_verified")
  image             String?

  @@map(name: "users")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model CollectionPoint {
  id   Int    @id @default(autoincrement())
  name String
  lat  Float
  lng  Float
  User User[]
}
